                try:
                    res: AutoTuneResult = auto_tune_for_criterion(crit, selected, ALL_DAILY, HIW_MAP)
                    # Apply to cfg_state and widget state
                    cfg_state.setdefault(crit, {})
                    for m in [r.metric for r in res.metrics]:
                        cfg_state[crit].setdefault(m, {"w": 0.1, "mf": {"type": "tri", "lo": 0.0, "mid": 0.0, "hi": 0.0, "invert": False}})
                    for r in res.metrics:
                        cfg_state[crit][r.metric]["w"] = float(r.weight)
                        cfg_state[crit][r.metric]["mf"] = {
                            "type": "tri",
                            "lo": float(r.lo),
                            "mid": float(r.mid),
                            "hi": float(r.hi),
                            "invert": bool(r.invert),
                        }
                        # Sync widget state so UI reflects auto-tuned values immediately
                        st.session_state[f"w_{crit}_{r.metric}"] = float(r.weight)
                        st.session_state[f"lo_{crit}_{r.metric}"] = float(r.lo)
                        st.session_state[f"mid_{crit}_{r.metric}"] = float(r.mid)
                        st.session_state[f"hi_{crit}_{r.metric}"] = float(r.hi)
                        st.session_state[f"inv_{crit}_{r.metric}"] = bool(r.invert)
                        st.session_state[f"mft_{crit}_{r.metric}"] = "tri"
                    # Store diagnostics
                    st.session_state["fasl_autotune_debug"][crit] = res
                    st.success("Auto-tuned parameters applied.")
                except Exception as e:
                    st.error(f"Auto-tune failed: {e}")
        with col_a2:
            # Informational description
            st.caption("Auto-tune uses 1D k-means per metric to locate distribution boundaries and sets an open triangular membership aligned to metric direction. Weights are normalized by robust spread (P90-P10).")

        # Diagnostics expander
        _res = st.session_state.get("fasl_autotune_debug", {}).get(crit)
        if _res is not None:
            with st.expander(f"Auto-tune diagnostics â€“ {crit}", expanded=False):
                res = _res
                for r in getattr(res, 'metrics', []) or []:
                    st.markdown(f"**{r.metric}**  ")
                    c1, c2 = st.columns([2, 3])
                    with c1:
                res = _res
                for r in getattr(res, 'metrics', []) or []:
                    st.markdown(f"**{r.metric}**  ")
                    c1, c2 = st.columns([2, 3])
                    with c1:
                        st.write(
                            f"Centers: {tuple(round(c, 3) for c in r.centers)} | Boundaries: {(round(r.boundaries[0], 3), round(r.boundaries[1], 3))}"
                        )
                        st.write(
                            f"P10/50/90: {(round(r.p10,3), round(r.p50,3), round(r.p90,3))} | Weight: {r.weight:.3f} | Invert: {r.invert}"
                        )
                        try:
                            st.latex(_mf_tri_latex(r.metric, r.lo, r.mid, r.hi, r.invert))
                        except Exception:
                            pass
                    with c2:
                        try:
                            _boxplot_with_ranges(ALL_DAILY, r.metric, r.lo, r.mid, r.hi, invert=r.invert)
                        except Exception:
                            st.info("No values for plotting.")
        cfg_state.setdefault(crit, {})
        # Drop metrics not available anymore
        for m in list(cfg_state[crit].keys()):
            if m not in available or m not in selected:
                cfg_state[crit].pop(m)
        for m in selected:
            cfg_state[crit].setdefault(
                m,
                {
                    "w": 0.1,
                    "mf": {
                        "type": "tri",
                        "lo": 0.0,
                        "mid": 0.0,
                        "hi": 0.0,
                        "invert": not HIW_MAP.get(m, True),
                    },
                },
            )
        for k in sorted(selected, key=_metric_sort_key):
